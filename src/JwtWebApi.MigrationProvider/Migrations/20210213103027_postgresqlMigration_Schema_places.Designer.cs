// <auto-generated />
using System;
using JwtWebApi.MigrationProvider.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace JwtWebApi.MigrationProvider.Migrations
{
    [DbContext(typeof(MigrationPostgreSqlContext))]
    [Migration("20210213103027_postgresqlMigration_Schema_places")]
    partial class postgresqlMigration_Schema_places
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:Collation", "en_US.utf8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.AspNetRoles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityAlwaysColumn();

                    b.Property<string>("RoleName")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RoleName" }, "IX_RoleName")
                        .IsUnique();

                    b.ToTable("AspNetRoles", "aspnet");
                });

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.AspNetUserRoles", b =>
                {
                    b.Property<string>("AspNetUserId")
                        .HasColumnType("character varying");

                    b.Property<int?>("RoleId")
                        .HasColumnType("integer");

                    b.HasIndex(new[] { "AspNetUserId" }, "IX_AspNetUserRoles_AspNetUserId");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetUserRoles_RoleId");

                    b.ToTable("AspNetUserRoles", "aspnet");
                });

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.AspNetUsers", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool?>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("SecurityStamp")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("AspNetUsers", "aspnet");
                });

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.Attractions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityAlwaysColumn();

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("BuildDate")
                        .HasColumnType("timestamp(6) with time zone");

                    b.Property<int>("CityId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Preview")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Attractions", "places");
                });

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.CateringTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityAlwaysColumn();

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "IX_CateringTypes_Name")
                        .IsUnique();

                    b.ToTable("CateringTypes", "places");
                });

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.Cities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityAlwaysColumn();

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "IX_Cities_Name")
                        .IsUnique();

                    b.ToTable("Cities", "places");
                });

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.CuisineTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityAlwaysColumn();

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "IX_CuisineTypes_Name")
                        .IsUnique();

                    b.ToTable("CuisineTypes", "places");
                });

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.DenyTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityAlwaysColumn();

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "IX_DenyTypes_Name")
                        .IsUnique();

                    b.ToTable("DenyTypes", "places");
                });

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.EquipmentTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityAlwaysColumn();

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "IX_EquipmentTypes_Name")
                        .IsUnique();

                    b.ToTable("EquipmentTypes", "places");
                });

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.HotelEquipmentTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityAlwaysColumn();

                    b.Property<int?>("EquipmentTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("HoletId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentTypeId");

                    b.HasIndex("HoletId");

                    b.ToTable("HotelEquipmentTypes", "places");
                });

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.HotelServiceTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityAlwaysColumn();

                    b.Property<int?>("HoletId")
                        .HasColumnType("integer");

                    b.Property<int?>("ServiceTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("HoletId");

                    b.HasIndex("ServiceTypeId");

                    b.ToTable("HotelServiceTypes", "places");
                });

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.Hotels", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityAlwaysColumn();

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("BuildDate")
                        .HasColumnType("timestamp(6) with time zone");

                    b.Property<int>("CityId")
                        .HasColumnType("integer");

                    b.Property<int>("ClassType")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("HousingTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Preview")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("HousingTypeId");

                    b.ToTable("Hotels", "places");
                });

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.HousingTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityAlwaysColumn();

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "IX_HousingTypes_Name")
                        .IsUnique();

                    b.ToTable("HousingTypes", "places");
                });

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.RestaurantCoisineTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityAlwaysColumn();

                    b.Property<int?>("CuisineTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("RestaurantId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CuisineTypeId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("RestaurantCoisineTypes", "places");
                });

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.RestaurantDenyTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityAlwaysColumn();

                    b.Property<int?>("DenyTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("RestaurantId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DenyTypeId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("RestaurantDenyTypes", "places");
                });

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.Restaurants", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityAlwaysColumn();

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("BuildDate")
                        .HasColumnType("timestamp(6) with time zone");

                    b.Property<int>("CateringTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("CityId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Preview")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("CateringTypeId");

                    b.HasIndex("CityId");

                    b.ToTable("Restaurants", "places");
                });

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.ServiceTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityAlwaysColumn();

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "IX_ServiceTypes_Name")
                        .IsUnique();

                    b.ToTable("ServiceTypes", "places");
                });

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.AspNetUserRoles", b =>
                {
                    b.HasOne("JwtWebApi.MigrationProvider.Models.AspNetUsers", "AspNetUser")
                        .WithMany()
                        .HasForeignKey("AspNetUserId")
                        .HasConstraintName("FK_AspNetUsers")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("JwtWebApi.MigrationProvider.Models.AspNetRoles", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_AspNetRoles")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("AspNetUser");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.Attractions", b =>
                {
                    b.HasOne("JwtWebApi.MigrationProvider.Models.Cities", "City")
                        .WithMany("Attractions")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_Attractions_CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.HotelEquipmentTypes", b =>
                {
                    b.HasOne("JwtWebApi.MigrationProvider.Models.EquipmentTypes", "EquipmentType")
                        .WithMany("HotelEquipmentTypes")
                        .HasForeignKey("EquipmentTypeId")
                        .HasConstraintName("FK_HotelEquipmentTypes_CousineTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("JwtWebApi.MigrationProvider.Models.Hotels", "Holet")
                        .WithMany("HotelEquipmentTypes")
                        .HasForeignKey("HoletId")
                        .HasConstraintName("FK_HotelEquipmentTypes_HoletId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("EquipmentType");

                    b.Navigation("Holet");
                });

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.HotelServiceTypes", b =>
                {
                    b.HasOne("JwtWebApi.MigrationProvider.Models.Hotels", "Holet")
                        .WithMany("HotelServiceTypes")
                        .HasForeignKey("HoletId")
                        .HasConstraintName("FK_HotelServiceTypes_HoletId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("JwtWebApi.MigrationProvider.Models.ServiceTypes", "ServiceType")
                        .WithMany("HotelServiceTypes")
                        .HasForeignKey("ServiceTypeId")
                        .HasConstraintName("FK_HotelServiceTypes_ServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Holet");

                    b.Navigation("ServiceType");
                });

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.Hotels", b =>
                {
                    b.HasOne("JwtWebApi.MigrationProvider.Models.Cities", "City")
                        .WithMany("Hotels")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_Hotels_CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JwtWebApi.MigrationProvider.Models.HousingTypes", "HousingType")
                        .WithMany("Hotels")
                        .HasForeignKey("HousingTypeId")
                        .HasConstraintName("FK_Hotels_HousingTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("HousingType");
                });

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.RestaurantCoisineTypes", b =>
                {
                    b.HasOne("JwtWebApi.MigrationProvider.Models.CuisineTypes", "CuisineType")
                        .WithMany("RestaurantCoisineTypes")
                        .HasForeignKey("CuisineTypeId")
                        .HasConstraintName("FK_RestaurantCoisineTypes_CousineTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("JwtWebApi.MigrationProvider.Models.Restaurants", "Restaurant")
                        .WithMany("RestaurantCoisineTypes")
                        .HasForeignKey("RestaurantId")
                        .HasConstraintName("FK_RestaurantCoisineTypes_RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("CuisineType");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.RestaurantDenyTypes", b =>
                {
                    b.HasOne("JwtWebApi.MigrationProvider.Models.DenyTypes", "DenyType")
                        .WithMany("RestaurantDenyTypes")
                        .HasForeignKey("DenyTypeId")
                        .HasConstraintName("FK_RestaurantDenyTypes_DenyTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("JwtWebApi.MigrationProvider.Models.Restaurants", "Restaurant")
                        .WithMany("RestaurantDenyTypes")
                        .HasForeignKey("RestaurantId")
                        .HasConstraintName("FK_RestaurantDenyTypes_RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("DenyType");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.Restaurants", b =>
                {
                    b.HasOne("JwtWebApi.MigrationProvider.Models.CateringTypes", "CateringType")
                        .WithMany("Restaurants")
                        .HasForeignKey("CateringTypeId")
                        .HasConstraintName("FK_Restaurants_CateringTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JwtWebApi.MigrationProvider.Models.Cities", "City")
                        .WithMany("Restaurants")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_Restaurants_CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CateringType");

                    b.Navigation("City");
                });

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.CateringTypes", b =>
                {
                    b.Navigation("Restaurants");
                });

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.Cities", b =>
                {
                    b.Navigation("Attractions");

                    b.Navigation("Hotels");

                    b.Navigation("Restaurants");
                });

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.CuisineTypes", b =>
                {
                    b.Navigation("RestaurantCoisineTypes");
                });

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.DenyTypes", b =>
                {
                    b.Navigation("RestaurantDenyTypes");
                });

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.EquipmentTypes", b =>
                {
                    b.Navigation("HotelEquipmentTypes");
                });

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.Hotels", b =>
                {
                    b.Navigation("HotelEquipmentTypes");

                    b.Navigation("HotelServiceTypes");
                });

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.HousingTypes", b =>
                {
                    b.Navigation("Hotels");
                });

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.Restaurants", b =>
                {
                    b.Navigation("RestaurantCoisineTypes");

                    b.Navigation("RestaurantDenyTypes");
                });

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.ServiceTypes", b =>
                {
                    b.Navigation("HotelServiceTypes");
                });
#pragma warning restore 612, 618
        }
    }
}
