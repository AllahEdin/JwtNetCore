// <auto-generated />
using System;
using JwtWebApi.MigrationProvider.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace JwtWebApi.MigrationProvider.Migrations
{
    [DbContext(typeof(MigrationPostgreSqlContext))]
    [Migration("20210322135505_postgresqlMigration_Table_Rating")]
    partial class postgresqlMigration_Table_Rating
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:Collation", "en_US.utf8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.AgeTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityAlwaysColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasDefaultValueSql("''::character varying");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "IX_AgeTypes_Name")
                        .IsUnique();

                    b.ToTable("AgeTypes", "places");
                });

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.AspNetRoles", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id", "RoleName" }, "UIX_AspNetRoles_Id_Name")
                        .IsUnique();

                    b.HasIndex(new[] { "RoleName" }, "UIX_AspNetRoles_Name")
                        .IsUnique();

                    b.ToTable("AspNetRoles", "aspnet");
                });

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.AspNetUserRoles", b =>
                {
                    b.Property<string>("AspNetUserId")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasIndex(new[] { "AspNetUserId", "RoleId" }, "AspNet_UserRoles_AspNetUserRole_RoleId")
                        .IsUnique();

                    b.HasIndex(new[] { "AspNetUserId" }, "IX_AspNetUserRoles_AspNetUserId");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetUserRoles_RoleId");

                    b.ToTable("AspNetUserRoles", "aspnet");
                });

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.AspNetUsers", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool?>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsBanned")
                        .HasColumnType("boolean");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SecurityStamp")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("AspNetUsers", "aspnet");
                });

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.AttractionPlaceTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityAlwaysColumn();

                    b.Property<int>("AttractionId")
                        .HasColumnType("integer");

                    b.Property<int>("PlaceTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "PlaceTypeId" }, "IX_AttractionPlaceTypes_PlaceTypeId");

                    b.HasIndex(new[] { "AttractionId", "PlaceTypeId" }, "UIX_AttractionPlaceTypes_AttractionId_PlaceTypeId")
                        .IsUnique();

                    b.ToTable("AttractionPlaceTypes", "places");
                });

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.AttractionSubjects", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityAlwaysColumn();

                    b.Property<int>("AttractionId")
                        .HasColumnType("integer");

                    b.Property<int>("SubjectId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "SubjectId" }, "IX_AttractionSubjects_SubjectId");

                    b.HasIndex(new[] { "AttractionId", "SubjectId" }, "UIX_AttractionSubjects_AttractionId_SubjectId")
                        .IsUnique();

                    b.ToTable("AttractionSubjects", "places");
                });

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.Attractions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityAlwaysColumn();

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("BuildDate")
                        .HasColumnType("timestamp(6) with time zone");

                    b.Property<int>("CityId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Discount")
                        .HasColumnType("integer");

                    b.Property<int>("DistrictId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Preview")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<int>("Weight")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CityId" }, "IX_Attractions_CityId");

                    b.HasIndex(new[] { "DistrictId" }, "IX_Attractions_DistrictId");

                    b.ToTable("Attractions", "places");
                });

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.CateringTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityAlwaysColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasDefaultValueSql("''::character varying");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "IX_CateringTypes_Name")
                        .IsUnique();

                    b.ToTable("CateringTypes", "places");
                });

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.Cities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityAlwaysColumn();

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "IX_Cities_Name")
                        .IsUnique();

                    b.ToTable("Cities", "places");
                });

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.CuisineTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityAlwaysColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasDefaultValueSql("''::character varying");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "IX_CuisineTypes_Name")
                        .IsUnique();

                    b.ToTable("CuisineTypes", "places");
                });

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.DenyTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityAlwaysColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasDefaultValueSql("''::character varying");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "IX_DenyTypes_Name")
                        .IsUnique();

                    b.ToTable("DenyTypes", "places");
                });

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.Dictionaries", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Code" }, "AK_Dictionaries_Code")
                        .IsUnique();

                    b.HasIndex(new[] { "Code" }, "UIX_Dictionaries_Code")
                        .IsUnique();

                    b.ToTable("Dictionaries", "places");
                });

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.DictionaryRows", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("DictionaryCode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Weight")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DictionaryCode", "Value" }, "UIX_DictionaryRows_DictionaryCode_Value")
                        .IsUnique();

                    b.ToTable("DictionaryRows", "places");
                });

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.DistrictCities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityAlwaysColumn();

                    b.Property<int>("CityId")
                        .HasColumnType("integer");

                    b.Property<int>("DistrictId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CityId" }, "IX_DistrictCities_CityId");

                    b.HasIndex(new[] { "DistrictId" }, "IX_DistrictCities_DistrictId");

                    b.HasIndex(new[] { "DistrictId", "CityId" }, "UIX_DistrictCities_DistrictId_CityId")
                        .IsUnique();

                    b.ToTable("DistrictCities", "places");
                });

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.Districts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasDefaultValueSql("''::character varying");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "IX_Districts_Name")
                        .IsUnique();

                    b.ToTable("Districts", "places");
                });

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.EquipmentTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityAlwaysColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasDefaultValueSql("''::character varying");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "IX_EquipmentTypes_Name")
                        .IsUnique();

                    b.ToTable("EquipmentTypes", "places");
                });

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.HotelEquipmentTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityAlwaysColumn();

                    b.Property<int>("EquipmentTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("HotelId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "EquipmentTypeId" }, "IX_HotelEquipmentTypes_EquipmentTypeId");

                    b.HasIndex(new[] { "HotelId", "EquipmentTypeId" }, "UIX_HotelEquipmentType_HotelId_EqupmentTypeId")
                        .IsUnique();

                    b.ToTable("HotelEquipmentTypes", "places");
                });

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.HotelServiceTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityAlwaysColumn();

                    b.Property<int>("HotelId")
                        .HasColumnType("integer");

                    b.Property<int>("ServiceTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ServiceTypeId" }, "IX_HotelServiceTypes_ServiceTypeId");

                    b.HasIndex(new[] { "HotelId", "ServiceTypeId" }, "UIX_HotelEquipmentType_HotelId_ServiceTypeId")
                        .IsUnique();

                    b.ToTable("HotelServiceTypes", "places");
                });

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.Hotels", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityAlwaysColumn();

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("BuildDate")
                        .HasColumnType("timestamp(6) with time zone");

                    b.Property<int>("CityId")
                        .HasColumnType("integer");

                    b.Property<int>("ClassType")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Discount")
                        .HasColumnType("integer");

                    b.Property<int>("DistrictId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<int>("HousingTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Preview")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<int>("Weight")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CityId" }, "IX_Hotels_CityId");

                    b.HasIndex(new[] { "DistrictId" }, "IX_Hotels_DistrictId");

                    b.HasIndex(new[] { "HousingTypeId" }, "IX_Hotels_HousingTypeId");

                    b.ToTable("Hotels", "places");
                });

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.HousingTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityAlwaysColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasDefaultValueSql("''::character varying");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "IX_HousingTypes_Name")
                        .IsUnique();

                    b.ToTable("HousingTypes", "places");
                });

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.PeopleTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityAlwaysColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasDefaultValueSql("''::character varying");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "IX_PeopleTypes_Name")
                        .IsUnique();

                    b.ToTable("PeopleTypes", "places");
                });

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.PlaceTypeSubjects", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("PlaceTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("SubjectId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "PlaceTypeId", "SubjectId" }, "UIX_PlaceTypeSubjects_PlaceTypeId_SubjectId")
                        .IsUnique();

                    b.HasIndex(new[] { "SubjectId" }, "UIX_PlaceTypeSubjects_SubjectId")
                        .IsUnique();

                    b.ToTable("PlaceTypeSubjects", "places");
                });

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.PlaceTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityAlwaysColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasDefaultValueSql("''::character varying");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "IX_PlaceTypes_Name")
                        .IsUnique();

                    b.ToTable("PlaceTypes", "places");
                });

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.RestaurantCuisineTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityAlwaysColumn();

                    b.Property<int>("CuisineTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.HasIndex(new[] { "CuisineTypeId" }, "IX_RestaurantCuisineTypes_CuisineTypeId");

                    b.ToTable("RestaurantCuisineTypes", "places");
                });

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.RestaurantDenyTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityAlwaysColumn();

                    b.Property<int>("DenyTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DenyTypeId" }, "IX_RestaurantDenyTypes_DenyTypeId");

                    b.HasIndex(new[] { "RestaurantId", "DenyTypeId" }, "UIX_RestaurantDenyTypes_DenyTypeId_RestaurantId")
                        .IsUnique();

                    b.ToTable("RestaurantDenyTypes", "places");
                });

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.Restaurants", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityAlwaysColumn();

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("BuildDate")
                        .HasColumnType("timestamp(6) with time zone");

                    b.Property<int>("CateringTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("CityId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Discount")
                        .HasColumnType("integer");

                    b.Property<int>("DistrictId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Preview")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<int>("Weight")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CateringTypeId" }, "IX_Restaurants_CateringTypeId");

                    b.HasIndex(new[] { "CityId" }, "IX_Restaurants_CityId");

                    b.HasIndex(new[] { "DistrictId" }, "IX_Restaurants_DistrictId");

                    b.ToTable("Restaurants", "places");
                });

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.Reviews", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("boolean");

                    b.Property<int>("PlaceId")
                        .HasColumnType("integer");

                    b.Property<string>("PlaceType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<float>("Rate")
                        .HasColumnType("real");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId", "PlaceType", "PlaceId" }, "UIX_Reviews_UserId_PlaceType_PlaceId")
                        .IsUnique();

                    b.ToTable("Reviews", "places");
                });

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.RouteAgeTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityAlwaysColumn();

                    b.Property<int>("AgeTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("RouteId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AgeTypeId" }, "IX_RouteAgeTypes_AgeTypeId");

                    b.HasIndex(new[] { "RouteId", "AgeTypeId" }, "UIX_RouteAgeTypes_RouteId_AgeTypeId")
                        .IsUnique();

                    b.ToTable("RouteAgeTypes", "places");
                });

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.RouteAttractions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityAlwaysColumn();

                    b.Property<int>("AttractionId")
                        .HasColumnType("integer");

                    b.Property<int>("Order")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<int>("RouteId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AttractionId" }, "IX_RouteAttractions_AttractionId");

                    b.HasIndex(new[] { "RouteId", "AttractionId" }, "UIX_RouteAttractions_RouteId_AttractionId")
                        .IsUnique();

                    b.ToTable("RouteAttractions", "places");
                });

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.RoutePeopleTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityAlwaysColumn();

                    b.Property<int>("PeopleTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("RouteId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "PeopleTypeId" }, "IX_RoutePeopleTypes_PeopleTypeId");

                    b.HasIndex(new[] { "RouteId", "PeopleTypeId" }, "UIX_RoutePeopleTypes_RouteId_PeopleTypeId")
                        .IsUnique();

                    b.ToTable("RoutePeopleTypes", "places");
                });

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.RouteSubjectNames", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityAlwaysColumn();

                    b.Property<int>("RouteId")
                        .HasColumnType("integer");

                    b.Property<int>("SubjectNameId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "SubjectNameId" }, "IX_RouteSubjectNames_SubjectNameId");

                    b.HasIndex(new[] { "RouteId", "SubjectNameId" }, "UIX_RouteSubjectNames_RouteId_SubjectNameId")
                        .IsUnique();

                    b.ToTable("RouteSubjectNames", "places");
                });

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.RouteSubjectTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityAlwaysColumn();

                    b.Property<int>("RouteId")
                        .HasColumnType("integer");

                    b.Property<int>("SubjectTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "SubjectTypeId" }, "IX_RouteSubjectTypes_SubjectTypeId");

                    b.HasIndex(new[] { "RouteId", "SubjectTypeId" }, "UIX_RouteSubjectTypes_RouteId_SubjectTypeId")
                        .IsUnique();

                    b.ToTable("RouteSubjectTypes", "places");
                });

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.Routes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityAlwaysColumn();

                    b.Property<bool>("Animals")
                        .HasColumnType("boolean");

                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("DistrictId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<int>("Length")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<int>("Time")
                        .HasColumnType("integer");

                    b.Property<int>("Weight")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CityId" }, "IX_Routes_CityId");

                    b.HasIndex(new[] { "DistrictId" }, "IX_Routes_DistrictId");

                    b.ToTable("Routes", "places");
                });

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.ServiceTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityAlwaysColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasDefaultValueSql("''::character varying");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "IX_ServiceTypes_Name")
                        .IsUnique();

                    b.ToTable("ServiceTypes", "places");
                });

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.SubjectNames", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityAlwaysColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasDefaultValueSql("''::character varying");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "IX_SubjectNames_Name")
                        .IsUnique();

                    b.ToTable("SubjectNames", "places");
                });

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.SubjectTypeSubjectNames", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("SubjectNameId")
                        .HasColumnType("integer");

                    b.Property<int>("SubjectTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "SubjectNameId" }, "UIX_SubjectTypeSubjectNames_SubjectNameId")
                        .IsUnique();

                    b.HasIndex(new[] { "SubjectTypeId", "SubjectNameId" }, "UIX_SubjectTypeSubjectNames_SubjectNameId_SubjectTypeId")
                        .IsUnique();

                    b.ToTable("SubjectTypeSubjectNames", "places");
                });

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.SubjectTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityAlwaysColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasDefaultValueSql("''::character varying");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "IX_SubjectTypes_Name")
                        .IsUnique();

                    b.ToTable("SubjectTypes", "places");
                });

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.Subjects", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityAlwaysColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasDefaultValueSql("''::character varying");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "IX_Subjects_Name")
                        .IsUnique();

                    b.ToTable("Subjects", "places");
                });

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.AspNetUserRoles", b =>
                {
                    b.HasOne("JwtWebApi.MigrationProvider.Models.AspNetUsers", "AspNetUser")
                        .WithMany()
                        .HasForeignKey("AspNetUserId")
                        .HasConstraintName("FK_AspNetUsers")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JwtWebApi.MigrationProvider.Models.AspNetRoles", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_AspNetRoles")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AspNetUser");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.AttractionPlaceTypes", b =>
                {
                    b.HasOne("JwtWebApi.MigrationProvider.Models.Attractions", "Attraction")
                        .WithMany("AttractionPlaceTypes")
                        .HasForeignKey("AttractionId")
                        .HasConstraintName("FK_AttractionPlaceTypes_AttractionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JwtWebApi.MigrationProvider.Models.DictionaryRows", "PlaceType")
                        .WithMany("AttractionPlaceTypes")
                        .HasForeignKey("PlaceTypeId")
                        .HasConstraintName("FK_AttractionPlaceTypes_PlaceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attraction");

                    b.Navigation("PlaceType");
                });

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.AttractionSubjects", b =>
                {
                    b.HasOne("JwtWebApi.MigrationProvider.Models.Attractions", "Attraction")
                        .WithMany("AttractionSubjects")
                        .HasForeignKey("AttractionId")
                        .HasConstraintName("FK_AttractionSubjects_AttractionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JwtWebApi.MigrationProvider.Models.DictionaryRows", "Subject")
                        .WithMany("AttractionSubjects")
                        .HasForeignKey("SubjectId")
                        .HasConstraintName("FK_AttractionSubjects_SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attraction");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.DictionaryRows", b =>
                {
                    b.HasOne("JwtWebApi.MigrationProvider.Models.Dictionaries", "DictionaryCodeNavigation")
                        .WithMany("DictionaryRows")
                        .HasForeignKey("DictionaryCode")
                        .HasConstraintName("FK_DictionaryRows_DictionaryCode")
                        .HasPrincipalKey("Code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DictionaryCodeNavigation");
                });

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.DistrictCities", b =>
                {
                    b.HasOne("JwtWebApi.MigrationProvider.Models.DictionaryRows", "City")
                        .WithMany("DistrictCitiesCity")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_DistrictCities_CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JwtWebApi.MigrationProvider.Models.DictionaryRows", "District")
                        .WithMany("DistrictCitiesDistrict")
                        .HasForeignKey("DistrictId")
                        .HasConstraintName("FK_DistrictCities_DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("District");
                });

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.HotelEquipmentTypes", b =>
                {
                    b.HasOne("JwtWebApi.MigrationProvider.Models.DictionaryRows", "EquipmentType")
                        .WithMany("HotelEquipmentTypes")
                        .HasForeignKey("EquipmentTypeId")
                        .HasConstraintName("FK_HotelEquipmentTypes_EquipmentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JwtWebApi.MigrationProvider.Models.Hotels", "Hotel")
                        .WithMany("HotelEquipmentTypes")
                        .HasForeignKey("HotelId")
                        .HasConstraintName("FK_HotelEquipmentTypes_HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EquipmentType");

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.HotelServiceTypes", b =>
                {
                    b.HasOne("JwtWebApi.MigrationProvider.Models.Hotels", "Hotel")
                        .WithMany("HotelServiceTypes")
                        .HasForeignKey("HotelId")
                        .HasConstraintName("FK_HotelServiceTypes_HoletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JwtWebApi.MigrationProvider.Models.DictionaryRows", "ServiceType")
                        .WithMany("HotelServiceTypes")
                        .HasForeignKey("ServiceTypeId")
                        .HasConstraintName("FK_HotelServiceTypes_ServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");

                    b.Navigation("ServiceType");
                });

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.PlaceTypeSubjects", b =>
                {
                    b.HasOne("JwtWebApi.MigrationProvider.Models.DictionaryRows", "PlaceType")
                        .WithMany("PlaceTypeSubjectsPlaceType")
                        .HasForeignKey("PlaceTypeId")
                        .HasConstraintName("FK_PlaceTypeSubjects_PlaceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JwtWebApi.MigrationProvider.Models.DictionaryRows", "Subject")
                        .WithOne("PlaceTypeSubjectsSubject")
                        .HasForeignKey("JwtWebApi.MigrationProvider.Models.PlaceTypeSubjects", "SubjectId")
                        .HasConstraintName("FK_PlaceTypeSubjects_SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlaceType");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.RestaurantCuisineTypes", b =>
                {
                    b.HasOne("JwtWebApi.MigrationProvider.Models.DictionaryRows", "CuisineType")
                        .WithMany("RestaurantCuisineTypes")
                        .HasForeignKey("CuisineTypeId")
                        .HasConstraintName("FK_RestaurantCuisineTypes_CuisineTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JwtWebApi.MigrationProvider.Models.Restaurants", "Restaurant")
                        .WithMany("RestaurantCuisineTypes")
                        .HasForeignKey("RestaurantId")
                        .HasConstraintName("FK_RestaurantCuisineTypes_RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CuisineType");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.RestaurantDenyTypes", b =>
                {
                    b.HasOne("JwtWebApi.MigrationProvider.Models.DictionaryRows", "DenyType")
                        .WithMany("RestaurantDenyTypes")
                        .HasForeignKey("DenyTypeId")
                        .HasConstraintName("FK_RestaurantDenyTypes_DenyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JwtWebApi.MigrationProvider.Models.Restaurants", "Restaurant")
                        .WithMany("RestaurantDenyTypes")
                        .HasForeignKey("RestaurantId")
                        .HasConstraintName("FK_RestaurantDenyTypes_RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DenyType");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.RouteAgeTypes", b =>
                {
                    b.HasOne("JwtWebApi.MigrationProvider.Models.DictionaryRows", "AgeType")
                        .WithMany("RouteAgeTypes")
                        .HasForeignKey("AgeTypeId")
                        .HasConstraintName("FK_RouteAgeTypes_AgeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JwtWebApi.MigrationProvider.Models.Routes", "Route")
                        .WithMany("RouteAgeTypes")
                        .HasForeignKey("RouteId")
                        .HasConstraintName("FK_RouteAgeTypes_RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AgeType");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.RouteAttractions", b =>
                {
                    b.HasOne("JwtWebApi.MigrationProvider.Models.Attractions", "Attraction")
                        .WithMany("RouteAttractions")
                        .HasForeignKey("AttractionId")
                        .HasConstraintName("FK_RouteAttractions_AttractionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JwtWebApi.MigrationProvider.Models.Routes", "Route")
                        .WithMany("RouteAttractions")
                        .HasForeignKey("RouteId")
                        .HasConstraintName("FK_RouteAttractions_RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attraction");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.RoutePeopleTypes", b =>
                {
                    b.HasOne("JwtWebApi.MigrationProvider.Models.DictionaryRows", "PeopleType")
                        .WithMany("RoutePeopleTypes")
                        .HasForeignKey("PeopleTypeId")
                        .HasConstraintName("FK_RoutePeopleTypes_PeopleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JwtWebApi.MigrationProvider.Models.Routes", "Route")
                        .WithMany("RoutePeopleTypes")
                        .HasForeignKey("RouteId")
                        .HasConstraintName("FK_RoutePeopleTypes_RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PeopleType");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.RouteSubjectNames", b =>
                {
                    b.HasOne("JwtWebApi.MigrationProvider.Models.Routes", "Route")
                        .WithMany("RouteSubjectNames")
                        .HasForeignKey("RouteId")
                        .HasConstraintName("FK_RouteSubjectNames_RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JwtWebApi.MigrationProvider.Models.DictionaryRows", "SubjectName")
                        .WithMany("RouteSubjectNames")
                        .HasForeignKey("SubjectNameId")
                        .HasConstraintName("FK_RouteSubjectNames_SubjectNameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Route");

                    b.Navigation("SubjectName");
                });

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.RouteSubjectTypes", b =>
                {
                    b.HasOne("JwtWebApi.MigrationProvider.Models.Routes", "Route")
                        .WithMany("RouteSubjectTypes")
                        .HasForeignKey("RouteId")
                        .HasConstraintName("FK_RouteSubjectTypes_RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JwtWebApi.MigrationProvider.Models.DictionaryRows", "SubjectType")
                        .WithMany("RouteSubjectTypes")
                        .HasForeignKey("SubjectTypeId")
                        .HasConstraintName("FK_RouteSubjectTypes_SubjectTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Route");

                    b.Navigation("SubjectType");
                });

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.SubjectTypeSubjectNames", b =>
                {
                    b.HasOne("JwtWebApi.MigrationProvider.Models.DictionaryRows", "SubjectName")
                        .WithOne("SubjectTypeSubjectNamesSubjectName")
                        .HasForeignKey("JwtWebApi.MigrationProvider.Models.SubjectTypeSubjectNames", "SubjectNameId")
                        .HasConstraintName("FK_SubjectTypeSubjectNames_SubjectNameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JwtWebApi.MigrationProvider.Models.DictionaryRows", "SubjectType")
                        .WithMany("SubjectTypeSubjectNamesSubjectType")
                        .HasForeignKey("SubjectTypeId")
                        .HasConstraintName("FK_SubjectTypeSubjectNames_SubjectTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubjectName");

                    b.Navigation("SubjectType");
                });

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.Attractions", b =>
                {
                    b.Navigation("AttractionPlaceTypes");

                    b.Navigation("AttractionSubjects");

                    b.Navigation("RouteAttractions");
                });

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.Dictionaries", b =>
                {
                    b.Navigation("DictionaryRows");
                });

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.DictionaryRows", b =>
                {
                    b.Navigation("AttractionPlaceTypes");

                    b.Navigation("AttractionSubjects");

                    b.Navigation("DistrictCitiesCity");

                    b.Navigation("DistrictCitiesDistrict");

                    b.Navigation("HotelEquipmentTypes");

                    b.Navigation("HotelServiceTypes");

                    b.Navigation("PlaceTypeSubjectsPlaceType");

                    b.Navigation("PlaceTypeSubjectsSubject");

                    b.Navigation("RestaurantCuisineTypes");

                    b.Navigation("RestaurantDenyTypes");

                    b.Navigation("RouteAgeTypes");

                    b.Navigation("RoutePeopleTypes");

                    b.Navigation("RouteSubjectNames");

                    b.Navigation("RouteSubjectTypes");

                    b.Navigation("SubjectTypeSubjectNamesSubjectName");

                    b.Navigation("SubjectTypeSubjectNamesSubjectType");
                });

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.Hotels", b =>
                {
                    b.Navigation("HotelEquipmentTypes");

                    b.Navigation("HotelServiceTypes");
                });

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.Restaurants", b =>
                {
                    b.Navigation("RestaurantCuisineTypes");

                    b.Navigation("RestaurantDenyTypes");
                });

            modelBuilder.Entity("JwtWebApi.MigrationProvider.Models.Routes", b =>
                {
                    b.Navigation("RouteAgeTypes");

                    b.Navigation("RouteAttractions");

                    b.Navigation("RoutePeopleTypes");

                    b.Navigation("RouteSubjectNames");

                    b.Navigation("RouteSubjectTypes");
                });
#pragma warning restore 612, 618
        }
    }
}
